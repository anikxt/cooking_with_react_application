{"ast":null,"code":"var _jsxFileName = \"/home/blaze/Desktop/web_dev/learning_react/src/components/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport RecipeList from './RecipeList';\nimport '../css/app.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const RecipeContext = /*#__PURE__*/React.createContext();\nconst LOCAL_STORAGE_KEY = 'cookingWithReact.recipes ';\n\nfunction App() {\n  _s();\n\n  const [recipes, setRecipes] = useState(sampleRecipes);\n  useEffect(() => {\n    const recipeJSON = localStorage.getItem(LOCAL_STORAGE_KEY);\n    if (recipeJSON != null) setRecipes(JSON.parse(recipeJSON));\n  }, []);\n  useEffect(() => {\n    console.log('Rendered');\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(recipes));\n  }, [recipes]);\n  const recipeContextValue = {\n    handleRecipeAdd,\n    handleRecipeDelete\n  };\n\n  function handleRecipeAdd() {\n    const newRecipe = {\n      id: Date.now().toString(),\n      name: 'New',\n      servings: 1,\n      cookTime: '1:00',\n      instructions: 'Instr.',\n      ingredients: [{\n        id: Date.now().toString(),\n        name: 'Name',\n        amount: '1 Tbs'\n      }]\n    };\n    setRecipes([...recipes, newRecipe]);\n  }\n\n  function handleRecipeDelete(id) {\n    setRecipes(recipes.filter(recipe => recipe.id !== id));\n  }\n\n  return /*#__PURE__*/_jsxDEV(RecipeContext.Provider, {\n    value: recipeContextValue,\n    children: /*#__PURE__*/_jsxDEV(RecipeList, {\n      recipes: recipes\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"YWlzeHOLqTLzoAcmjiIgqQuaAuc=\");\n\n_c = App;\nconst sampleRecipes = [{\n  id: 1,\n  name: 'Plain Chicken',\n  servings: 3,\n  cookTime: '1:45',\n  instructions: '1. Put salt on chicken\\n2. Put chicken in oven\\n3. Eat chicken',\n  ingredients: [{\n    id: 1,\n    name: 'Chicken',\n    amount: '2 Pounds'\n  }, {\n    id: 2,\n    name: 'Salt',\n    amount: '1 Tbs'\n  }]\n}, {\n  id: 2,\n  name: 'Plain Pork',\n  servings: 5,\n  cookTime: '0:45',\n  instructions: '1. Put paprika on pork\\n2. Put pork in oven\\n3. Eat pork',\n  ingredients: [{\n    id: 1,\n    name: 'Pork',\n    amount: '3 Pounds'\n  }, {\n    id: 2,\n    name: 'Paprika',\n    amount: '2 Tbs'\n  }]\n}];\nexport default App; // useEffect allows us to actually do some form of side effect everytime we render our application\n// second parameter is passed as an array and it's basically all of the different dependencies that you want to depend on.\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/blaze/Desktop/web_dev/learning_react/src/components/App.js"],"names":["React","useState","useEffect","RecipeList","RecipeContext","createContext","LOCAL_STORAGE_KEY","App","recipes","setRecipes","sampleRecipes","recipeJSON","localStorage","getItem","JSON","parse","console","log","setItem","stringify","recipeContextValue","handleRecipeAdd","handleRecipeDelete","newRecipe","id","Date","now","toString","name","servings","cookTime","instructions","ingredients","amount","filter","recipe"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAO,gBAAP;;AAEA,OAAO,MAAMC,aAAa,gBAAGJ,KAAK,CAACK,aAAN,EAAtB;AACP,MAAMC,iBAAiB,GAAG,2BAA1B;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAACS,aAAD,CAAtC;AAEAR,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMS,UAAU,GAAGC,YAAY,CAACC,OAAb,CAAqBP,iBAArB,CAAnB;AACA,QAAIK,UAAU,IAAI,IAAlB,EAAwBF,UAAU,CAACK,IAAI,CAACC,KAAL,CAAWJ,UAAX,CAAD,CAAV;AACzB,GAHQ,EAGN,EAHM,CAAT;AAKAT,EAAAA,SAAS,CAAC,MAAM;AACdc,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACAL,IAAAA,YAAY,CAACM,OAAb,CAAqBZ,iBAArB,EAAwCQ,IAAI,CAACK,SAAL,CAAeX,OAAf,CAAxC;AACD,GAHQ,EAGN,CAACA,OAAD,CAHM,CAAT;AAKA,QAAMY,kBAAkB,GAAG;AACzBC,IAAAA,eADyB;AAEzBC,IAAAA;AAFyB,GAA3B;;AAKA,WAASD,eAAT,GAA2B;AACzB,UAAME,SAAS,GAAG;AAChBC,MAAAA,EAAE,EAAEC,IAAI,CAACC,GAAL,GAAWC,QAAX,EADY;AAEhBC,MAAAA,IAAI,EAAE,KAFU;AAGhBC,MAAAA,QAAQ,EAAE,CAHM;AAIhBC,MAAAA,QAAQ,EAAE,MAJM;AAKhBC,MAAAA,YAAY,EAAE,QALE;AAMhBC,MAAAA,WAAW,EAAE,CACX;AAAER,QAAAA,EAAE,EAAEC,IAAI,CAACC,GAAL,GAAWC,QAAX,EAAN;AAA6BC,QAAAA,IAAI,EAAE,MAAnC;AAA2CK,QAAAA,MAAM,EAAE;AAAnD,OADW;AANG,KAAlB;AAWAxB,IAAAA,UAAU,CAAC,CAAC,GAAGD,OAAJ,EAAae,SAAb,CAAD,CAAV;AACD;;AAED,WAASD,kBAAT,CAA4BE,EAA5B,EAAgC;AAC9Bf,IAAAA,UAAU,CAACD,OAAO,CAAC0B,MAAR,CAAgBC,MAAD,IAAYA,MAAM,CAACX,EAAP,KAAcA,EAAzC,CAAD,CAAV;AACD;;AAED,sBACE,QAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAEJ,kBAA/B;AAAA,2BACE,QAAC,UAAD;AAAY,MAAA,OAAO,EAAEZ;AAArB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;GA1CQD,G;;KAAAA,G;AA4CT,MAAMG,aAAa,GAAG,CACpB;AACEc,EAAAA,EAAE,EAAE,CADN;AAEEI,EAAAA,IAAI,EAAE,eAFR;AAGEC,EAAAA,QAAQ,EAAE,CAHZ;AAIEC,EAAAA,QAAQ,EAAE,MAJZ;AAKEC,EAAAA,YAAY,EACV,gEANJ;AAOEC,EAAAA,WAAW,EAAE,CACX;AACER,IAAAA,EAAE,EAAE,CADN;AAEEI,IAAAA,IAAI,EAAE,SAFR;AAGEK,IAAAA,MAAM,EAAE;AAHV,GADW,EAMX;AACET,IAAAA,EAAE,EAAE,CADN;AAEEI,IAAAA,IAAI,EAAE,MAFR;AAGEK,IAAAA,MAAM,EAAE;AAHV,GANW;AAPf,CADoB,EAqBpB;AACET,EAAAA,EAAE,EAAE,CADN;AAEEI,EAAAA,IAAI,EAAE,YAFR;AAGEC,EAAAA,QAAQ,EAAE,CAHZ;AAIEC,EAAAA,QAAQ,EAAE,MAJZ;AAKEC,EAAAA,YAAY,EAAE,0DALhB;AAMEC,EAAAA,WAAW,EAAE,CACX;AACER,IAAAA,EAAE,EAAE,CADN;AAEEI,IAAAA,IAAI,EAAE,MAFR;AAGEK,IAAAA,MAAM,EAAE;AAHV,GADW,EAMX;AACET,IAAAA,EAAE,EAAE,CADN;AAEEI,IAAAA,IAAI,EAAE,SAFR;AAGEK,IAAAA,MAAM,EAAE;AAHV,GANW;AANf,CArBoB,CAAtB;AA0CA,eAAe1B,GAAf,C,CAEA;AACA","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport RecipeList from './RecipeList';\nimport '../css/app.css';\n\nexport const RecipeContext = React.createContext();\nconst LOCAL_STORAGE_KEY = 'cookingWithReact.recipes ';\n\nfunction App() {\n  const [recipes, setRecipes] = useState(sampleRecipes);\n\n  useEffect(() => {\n    const recipeJSON = localStorage.getItem(LOCAL_STORAGE_KEY);\n    if (recipeJSON != null) setRecipes(JSON.parse(recipeJSON));\n  }, []);\n\n  useEffect(() => {\n    console.log('Rendered');\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(recipes));\n  }, [recipes]);\n\n  const recipeContextValue = {\n    handleRecipeAdd,\n    handleRecipeDelete,\n  };\n\n  function handleRecipeAdd() {\n    const newRecipe = {\n      id: Date.now().toString(),\n      name: 'New',\n      servings: 1,\n      cookTime: '1:00',\n      instructions: 'Instr.',\n      ingredients: [\n        { id: Date.now().toString(), name: 'Name', amount: '1 Tbs' },\n      ],\n    };\n\n    setRecipes([...recipes, newRecipe]);\n  }\n\n  function handleRecipeDelete(id) {\n    setRecipes(recipes.filter((recipe) => recipe.id !== id));\n  }\n\n  return (\n    <RecipeContext.Provider value={recipeContextValue}>\n      <RecipeList recipes={recipes} />\n    </RecipeContext.Provider>\n  );\n}\n\nconst sampleRecipes = [\n  {\n    id: 1,\n    name: 'Plain Chicken',\n    servings: 3,\n    cookTime: '1:45',\n    instructions:\n      '1. Put salt on chicken\\n2. Put chicken in oven\\n3. Eat chicken',\n    ingredients: [\n      {\n        id: 1,\n        name: 'Chicken',\n        amount: '2 Pounds',\n      },\n      {\n        id: 2,\n        name: 'Salt',\n        amount: '1 Tbs',\n      },\n    ],\n  },\n  {\n    id: 2,\n    name: 'Plain Pork',\n    servings: 5,\n    cookTime: '0:45',\n    instructions: '1. Put paprika on pork\\n2. Put pork in oven\\n3. Eat pork',\n    ingredients: [\n      {\n        id: 1,\n        name: 'Pork',\n        amount: '3 Pounds',\n      },\n      {\n        id: 2,\n        name: 'Paprika',\n        amount: '2 Tbs',\n      },\n    ],\n  },\n];\n\nexport default App;\n\n// useEffect allows us to actually do some form of side effect everytime we render our application\n// second parameter is passed as an array and it's basically all of the different dependencies that you want to depend on.\n"]},"metadata":{},"sourceType":"module"}